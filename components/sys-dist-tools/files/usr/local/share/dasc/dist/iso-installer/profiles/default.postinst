#!/usr/bin/env sh

isdirempty() {
	[ -d "$1" ] || {
		err "isdirempty(): directory \`$1\" does not exist"
		return 2
	}
	{ isdirempty__buf=$(
		cd "$1" 2>&3 &&
		find . -path './*' -prune -exec sh -c 'echo .; kill -INT "$PPID"' \; 2>&3
	); } 3>&2 2>/dev/null
	case $? in
	0) [ -z "$isdirempty__buf" ] && return 0;;
	*) [ -z "$isdirempty__buf" ] && return 2;;
	esac
	return 1
}
wait_input() {
	printf %s\\n "Press Enter to continue or type \"sh\" to run a command shell..."
	IFS= read -r input && [ ":$input" = :sh ] && bash -l
}
wait_input_and_exit() {
	wait_input
	exit "$1"
}


unset -v DEBIAN_FRONTEND
SIGNALS='HUP INT QUIT ILL ABRT FPE SEGV PIPE ALRM TERM USR1 USR2'
dist_dir=/root/.local/share/dasc/tmp/dasc-dist
apt_sources_list_file=/etc/apt/sources.list.d/50-dasc-installer-tmp.list
apt_preferences_file=/etc/apt/preferences.d/50-dasc-installer-tmp
export HOME=/root || exit 1
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin || exit 1

[ ":$RUNNED_IN_VT" = :1 ] || {
	export RUNNED_IN_VT=1
	exec openvt -sw "$0"
}

{
	trap ' ' $SIGNALS &&
	rm -rf "$dist_dir"
} || wait_input_and_exit 1

setfont Uni3-Terminus14

buf=$(LC_ALL=C apt-cdrom -f add | LC_ALL=C awk '{
	if(sub(/^deb cdrom:/, "deb [ trusted=yes ] cdrom:")) print $0
}')
cat <<- EOF > "$apt_sources_list_file"
$buf
EOF
LC_ALL=C awk '{
	if(!sub(/^deb cdrom:/, "")) { next }
	if(sub(/^\[/, "")) sub(/\].*/, "")
	else sub(/[\t ].*/, "")
	gsub(/\"/, "")
	print "Package: *"
	print "Pin: origin \"" $0 "\""
	print "Pin-Priority: 1000"
	exit
}' <<- EOF > "$apt_preferences_file"
$buf
EOF

buf=$(
	. /etc/os-release
	LC_ALL=C awk 'BEGIN {
		is_main_repo_output = is_last_line_empty = 0
		main_repo = ARGV[2] == "" ? "http://deb.debian.org/debian/" : ARGV[2]
		version_codename = ARGV[3]
		ARGC = 2
	} {
		if($0 ~ /^[\t ]*#?deb([\t ]+\[[^]]+\])?[\t ]+cdrom:/) {
			if(!is_main_repo_output) { next }
			is_main_repo_output = 1
			gsub(/.*\[[^]]+\][^\t ]*[\t ]*/, "")
			print "deb " main_repo " " $0
			print "deb-src " main_repo " " $0
			next
		}
		if(is_main_repo_output && ($1 == "deb" || $1 == "deb-src") && \
			$2 == main_repo && $3 == version_codename) { next }
		if($0 ~ /^# Line commented out by installer/ && (getline) > 0)
			sub(/^[\t ]*#[\t ]*/, "")
		if($0 == "") {
			if(is_last_line_empty) { next }
			is_last_line_empty = 1
		} else is_last_line_empty = 0
		print $0
	}' /etc/apt/sources.list \
	"$(LC_ALL=C awk '{
		if(!match($0, "[\t ]*#?[\t ]*deb(-src)?[\t ]+https?://[^\t ]+")) { next }
		$0 = substr($0, RSTART, RLENGTH)
		sub(/.*[\t ]/, "")
		if($0 ~ "[a-z-]+://security\\.debian\\.org") { next }
		print $0
		exit
	}' /etc/apt/sources.list)" \
	"$VERSION_CODENAME"
) &&
cat <<- EOF > /etc/apt/sources.list
$buf
EOF
unset -v buf

printf %s\\n "Trying to download a latest version of DASC..."
sh -c 'eval "$(tar -xOf /media/cdrom/simple-cdd/dasc.tar.gz common/files/usr/local/bin/dasc-install)"' dasc-install -d
case $? in
0)
	dist_dir=$dist_dir/mainstream
	;;
*)
	dist_dir=$dist_dir/local
	(
		mkdir -p "$dist_dir" &&
		cd "$dist_dir" &&
		tar -xf /media/cdrom/simple-cdd/dasc.tar.gz
	) || wait_input_and_exit 1
	;;
esac

dpkg-reconfigure tzdata

while :; do
	"$dist_dir/debcomp" -c || {
		wait_input
		continue
	}
	[ -e /var/local/lib/debcomp/rollback ] && break
done

rm -rf "$dist_dir" \
	"$apt_sources_list_file" \
	"$apt_preferences_file"
dir=${dist_dir%/*}
while [ ":$dir" != :/root/.local/share ]; do
	! [ -e "$dir" ] || ! isdirempty "$dir" || rmdir "$dir"
	dir=${dir%/*}
done

exit 0
