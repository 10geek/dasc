#!/usr/bin/env sh
#
# passgen - script for generating passwords
#
# Version: 1.1.0 (14/07/2018)
#
# Copyright (c) 2016-2021 10geek
#
# Licensed under the MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

usage() {
	cat << END
Usage: $SCRIPT_NAME [length] [charset]

Options:
  length         Length of password. Default: 15
  charset        Set of characters for password generation.
                 Default: A-HJ-NP-Za-km-z2-9
  -v, --version  Output version information and exit
  -h, --help     Display this help and exit
END
}
err() {
	printf %s "$SCRIPT_NAME: " >&2
	if [ $# -gt 1 ]; then
		printf %s\\n "$2" >&2
		exit "$1"
	else
		printf %s\\n "$1" >&2
		return 1
	fi
}
checkval() {
	[ $# -lt 2 ] && return 1
	case $2 in
	n) [ $# -eq 2 ] && [ -n "$1" ];;
	z) [ $# -eq 2 ] && [ -z "$1" ];;
	*)
		LC_ALL=C awk -- '
		function validate_number(_i) {
			if(ARGV[2] == "i") {
				_o = int(_i + 0)
				if(_o "" != _i) _o = ""
			} else if(ARGV[2] == "f") {
				if(_i !~ /^-?(0|[1-9][0-9]*)(\.[0-9]*[1-9])?$/ || _i == "-0") _o = ""
				else _o = _i + 0
			} else return ""
			return _o
		}
		BEGIN {
			if(ARGC < 3) exit 1
			if(ARGV[2] == "i" || ARGV[2] == "f") {
				if(ARGC > 5) exit 1
				num = ARGV[1] + 0
				ARGV[1] = validate_number(ARGV[1])
				if(ARGV[1] == "") exit 1
				if(ARGC > 3 && ARGV[3] != "") {
					num_min = validate_number(ARGV[3])
					if(num_min == "" || num < num_min) exit 1
				}
				if(ARGC > 4 && ARGV[4] != "") {
					num_max = validate_number(ARGV[4])
					if(num_max == "" || num > num_max) exit 1
				}
				exit 0
			} else {
				if(ARGC != 4) exit 1
				if(ARGV[2] == "r") exit ARGV[1] !~ ARGV[3]
				else if(ARGV[2] == "nr") exit ARGV[1] ~ ARGV[3]
			}
			exit 1
		}' "$@" && { [ "$2" != i ] || [ "$(($1 + 0))" = "$1" ]; }
		;;
	esac
}

SCRIPT_NAME=$(basename -- "$0")
SCRIPT_VERSION=1.1.0
CHARSET=A-HJ-NP-Za-km-z2-9
LENGTH=15

if [ "$1" = --help ] || [ "$1" = -h ]; then
	usage; exit 0
elif [ "$1" = --version ] || [ "$1" = -v ]; then
	printf %s\\n "$SCRIPT_NAME $SCRIPT_VERSION"
	exit 0
fi

[ $# -ne 0 ] && {
	checkval "$1" i 1 || err 1 "\`$1' is invalid password length"
	LENGTH=$1
	[ $# -gt 1 ] && CHARSET=$2
}

PASSWORD=$(tr -dc "$CHARSET" < /dev/urandom 2>/dev/null | dd bs=1 count="$LENGTH" 2>/dev/null) || exit 1
[ -z "$PASSWORD" ] && exit 1

cat << EOF
$PASSWORD
EOF
